/*
 *  armboot - Startup Code for S5PC110/ARM-Cortex CPU-core
 *
 *  Copyright (c) 2009	Samsung Electronics
 *
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
 *
 * Base codes by scsuh (sc.suh)	uboot的启动阶段主要技巧就在于小范围内有限条件下的辗转腾挪
 */
// 总结: uboot的第一阶段做了哪些工作
// 1、构建异常向量表；2、设置CPU为SVC模式；3、关看门狗；4、开发板供电置锁；5、时钟初始化
// 6、DDR初始化；7、串口初始化并打印"OK"；8、重定位；9、建立映射表并开启MMU；10、跳转到第二阶段

// config.h在include目录下，这个文件不是uboot中本身存在的文件
// 而是配置过程中自动生成的文件。这个文件的内容包含了一个头文件: #include <configs/x210_sd.h>
// x210_sd.h头文件是整个uboot时的配置文件，决定了编译的时候走哪条路，哪些文件和代码会被编译进去
#include <config.h>
// inlcude/version.h中包含了include/version_autogenerated.h头文件，
// 这个头文件是自动生成的，里面内容是#define U_BOOT_VERSION "U-Boot 1.3.4"
// 显示uboot的版本号，在启动的时候CRT会打印出来，源自于Makefile中的配置值
#include <version.h>
#if defined(CONFIG_ENABLE_MMU)
// asm不是uboot的源生目录，uboot中本来是没有这个目录的
// asm是配置时创建的一个符号链接，实际指向的就是asm-arm
// 在编译好的uboot中cd include/asm/proc目录中有domain.h文件
// 实际链接到include/asm-arm/proc-armv/domain.h文件
// 从这里可以看出之前配置时创建的符号链接的作用，如果没有这些符号链接
// 则编译时根本通不过，因为找不到文件。(所以uboot不能在windows的共享文件夹下
// 配置编译，因为windows中没有符号链接)
// 以后如果涉及到符号链接的项目，都不能在共享文件夹下编译链接，都需要到Linux的源生目录下编译链接
#include <asm/proc/domain.h>
#endif
#include <regs.h>

// 这些宏都是指导uboot编译时的走向，哪些代码被编译进去
#ifndef CONFIG_ENABLE_MMU
#ifndef CFG_PHY_UBOOT_BASE
#define CFG_PHY_UBOOT_BASE	CFG_UBOOT_BASE
#endif
#endif

/*
 *************************************************************************
 *
 * Jump vector table as in table 3.1 in [1]			uboot的启动阶段主要技巧就在于小范围内有限条件下的辗转腾挪
 *
 *************************************************************************
 */
// .word是gnu汇编中的伪指令，相当于是int类型的变量
// 这里相当于定义一个int类型的数组
// 这16字节相当于程序开始的16字节校验头(SD卡启动/Nand启动需要16字节校验头)
// uboot这里start.S中在开头位置放了16字节的填充占位，这个占位的16字节只是保证正式的
// image的头部确实有16字节，但是这16字节的内容是不对的，还是需要后面去计算校验和
// 然后重新填充的(在sd_fusing目录中的C110-EVT1-mkbl1.c文件中有填充)
#if defined(CONFIG_EVT1) && !defined(CONFIG_FUSED)
	.word 0x2000
	.word 0x0
	.word 0x0
	.word 0x0
#endif
// iROM代码执行
// _start所在文件就是uboot整个程序的起始文件
// _start就是uboot整个程序的起始代码
// .globl是声明，将_start声明为全局变量，为了在其他地方能够被调用
.globl _start
// 下面是异常向量表的构建，异常向量表是硬件决定的，软件只是参照硬件的设计来实现的
// 异常向量表中每种异常都应该被处理，否则真遇到了这种异常就跑飞了
// 但是我们在uboot中并未非常细致的处理各种异常。
_start: b	reset
	ldr	pc, _undefined_instruction
	ldr	pc, _software_interrupt
	ldr	pc, _prefetch_abort
	ldr	pc, _data_abort
	ldr	pc, _not_used
	ldr	pc, _irq
	ldr	pc, _fiq

_undefined_instruction:
	.word undefined_instruction
_software_interrupt:
	.word software_interrupt
_prefetch_abort:
	.word prefetch_abort
_data_abort:
	.word data_abort
_not_used:
	.word not_used
_irq:
	.word irq
_fiq:
	.word fiq
_pad:
	.word 0x12345678 /* now 16*4=64 */
.global _end_vect
_end_vect:
// 伪指令.balignl，作用是让内存对齐，以16为单位对齐，用后面的0xdeadbeef填充来对齐
// 如果地址不对齐则自动向后走地址直到对齐，并且向后走的那些内存要用0xdeadbeef来填充
// 0xdeadbeef这是一个十六进制的数字
// 为什么要对齐访问? 有时候是效率的要求，有时候是硬件的特殊要求。
	.balignl 16,0xdeadbeef
/*
 *************************************************************************
 *
 * Startup Code (reset vector)
 *
 * do important init only if we don't start from memory!
 * setup Memory and board specific bits prior to relocation.
 * relocate armboot to ram
 * setup stack
 *
 *************************************************************************
 */
// 有点类似于指针；指针变量名字是_TEXT_BASE；指针变量的值是TEXT_BASE；指针类型是.word
// 通过ldr去加载_TEXT_BASE符号，从而直接加载TEXT_BASE的值
_TEXT_BASE:
	.word	TEXT_BASE	// TEXT_BASE值是从Makefile中传递过来的，链接地址(虚拟地址，c3e00000)

/*
 * Below variable is very important because we use MMU in U-Boot.
 * Without it, we cannot run code correctly before MMU is ON.
 * by scsuh.
 */
_TEXT_PHY_BASE:
	.word	CFG_PHY_UBOOT_BASE		// uboot在DDR中的物理地址

.globl _armboot_start
_armboot_start:
	.word _start

/*
 * These are defined in the board-specific linker script.
 */
.globl _bss_start
_bss_start:
	.word __bss_start

.globl _bss_end
_bss_end:
	.word _end

#if defined(CONFIG_USE_IRQ)
/* IRQ stack memory (calculated at run-time) */
.globl IRQ_STACK_START
IRQ_STACK_START:
	.word	0x0badc0de

/* IRQ stack memory (calculated at run-time) */
.globl FIQ_STACK_START
FIQ_STACK_START:
	.word 0x0badc0de
#endif

/*
 * the actual reset code
 */
// 系统在复位后默认是进入SVC模式的
// CPU复位后真正执行的有效代码是reset处的代码，因此reset符号处才是真正的有意义的代码开始的地方
// 其实arm CPU在复位时默认就会进入SVC模式，但是这里还是使用软件将其设置为SVC模式(这种方式比较保险)
reset:
	/*
	 * set the cpu to SVC32 mode and IRQ & FIQ disable
	 */
	@;mrs	r0,cpsr
	@;bic	r0,r0,#0x1f
	@;orr	r0,r0,#0xd3
	@;msr	cpsr,r0
	// 向cpsr(程序状态寄存器)的c(模式位bit0-bit7)位写0xd3
	msr	cpsr_c, #0xd3		@ I & F disable, Mode: 0x13 - SVC
	// 将CPU设置为禁止FIQ IRQ ，ARM状态，SVC模式

/*
 *************************************************************************
 *
 * CPU_init_critical registers
 *
 * setup important registers
 * setup memory timing
 *
 *************************************************************************
 */
         /*
         * we do sys-critical inits only at reboot,
         * not when booting from ram!
         */
// cpu_init_crit是CPU本身紧密相关的一些初始化，因为定义了CONFIG_EVT1，所以这块代码没有执行
cpu_init_crit:

#ifndef CONFIG_EVT1
#if 0	
	bl	v7_flush_dcache_all
#else
	bl	disable_l2cache

	mov	r0, #0x0	@ 
	mov	r1, #0x0	@ i	
	mov	r3, #0x0
	mov	r4, #0x0
lp1:
	mov	r2, #0x0	@ j
lp2:	
	mov	r3, r1, LSL #29		@ r3 = r1(i) <<29
	mov	r4, r2, LSL #6		@ r4 = r2(j) <<6
	orr	r4, r4, #0x2		@ r3 = (i<<29)|(j<<6)|(1<<1)
	orr	r3, r3, r4
	mov	r0, r3			@ r0 = r3
	bl	CoInvalidateDCacheIndex
	add	r2, #0x1		@ r2(j)++
	cmp	r2, #1024		@ r2 < 1024
	bne	lp2			@ jump to lp2
	add	r1, #0x1		@ r1(i)++
	cmp	r1, #8			@ r1(i) < 8
	bne	lp1			@ jump to lp1

	bl	set_l2cache_auxctrl
	
	bl	enable_l2cache
#endif
#endif

	// 在iROM中执行
	bl	disable_l2cache				// 禁止L2cache，属于CPU底层的一些初始化，不需深究

	bl	set_l2cache_auxctrl_cycle	// L2cache相关的初始化，不需深究

	bl	enable_l2cache				// 使能L2cache，不需深究
// 刷新icache和关MMU这两部分在uboot2013.10中用cpu_init_cp15函数来表示了
    /*
      * Invalidate L1 I/D	  刷新L1 cache的icache(缓存指令)和decache(缓存数据)
      */
    mov	r0, #0                  @ set up for MCR
    mcr	p15, 0, r0, c8, c7, 0   @ invalidate TLBs
    mcr	p15, 0, r0, c7, c5, 0   @ invalidate icache

    /*
      * disable MMU stuff and caches 关闭MMU
      */
    mrc	p15, 0, r0, c1, c0, 0		// 读取cp15的c1到r0中
    bic	r0, r0, #0x00002000     @ clear bits 13 (--V-)		// 置0 关icache
    bic	r0, r0, #0x00000007     @ clear bits 2:0 (-CAM)
    orr	r0, r0, #0x00000002     @ set bit 1 (--A-) Align	// 置1 开icache
    orr	r0, r0, #0x00000800     @ set bit 12 (Z---) BTB
    mcr 	p15, 0, r0, c1, c0, 0	// 写c1

	/* Read booting information */
    ldr	r0, =PRO_ID_BASE			// 在r0 中加载PRO_ID_BASE地址
    ldr	r1, [r0,#OMR_OFFSET]		// r1 中存放的地址是E0000004
    // 寄存器地址E0000004，这个寄存器中的值是硬件根据OM引脚的设置而自动设置值的。
    // 这个值反映的就是OM引脚的接法(OM引脚电平高低)，也就是真正的启动介质是谁。
    // 代码中可以通过读取这个寄存器的值然后判断其值来确定当前的启动方式是Nand还会SD卡
    // 把r1中这些位0xffffffc1清楚，剩下的位放到r2中，也就是OM引脚的接法
    // r2 中存了一个数，这个数就代表从哪里启动
    bic	r2, r1, #0xffffffc1

#ifdef CONFIG_VOGUES
	/* PS_HOLD(GPH0_0) set to output high */
	ldr	r0, =ELFIN_GPIO_BASE
	ldr	r1, =0x00000001
	str	r1, [r0, #GPH0CON_OFFSET]

	ldr	r1, =0x5500
	str	r1, [r0, #GPH0PUD_OFFSET]

	ldr	r1, =0x01
	str	r1, [r0, #GPH0DAT_OFFSET]
#endif

	/* NAND BOOT */
	// 512B(小页Nand)、2KB(小页Nand)、4KB(大页Nand)指的是一个页的大小；
	// 4-cycle、5-cycle指的是我们地址有几个cycle
	// 8-bit ECC、16-bit ECC
	cmp	r2, #0x0		@ 512B 4-cycle	// r2中的数等于0是NAND启动
	moveq	r3, #BOOT_NAND

	cmp	r2, #0x2		@ 2KB 5-cycle	// r2中的数等于2是NAND启动
	moveq	r3, #BOOT_NAND

	cmp	r2, #0x4		@ 4KB 5-cycle	8-bit ECC	// r2中的数等于4是NAND启动
	moveq	r3, #BOOT_NAND

	cmp	r2, #0x6		@ 4KB 5-cycle	16-bit ECC	// r2中的数等于6是NAND启动
	moveq	r3, #BOOT_NAND

	cmp	r2, #0x8		@ OneNAND Mux	// r2中的数等于8是ONENAND启动
	moveq	r3, #BOOT_ONENAND

	/* SD/MMC BOOT 	iROM先执行，根据OMpin判断出启动设备是SD卡，然后从SD卡的block1开始读取16KB(8KB)到iSRAM中执行BL1*/
	cmp     r2, #0xc			// r2中的数等于0xc是MMCSD启动
	moveq   r3, #BOOT_MMCSD		// r3寄存器中存了BOOT_MMCSD的值，为3，保存起来了

	/* NOR BOOT */
	cmp     r2, #0x14
	moveq   r3, #BOOT_NOR	

#if 0	/* Android C110 BSP uses OneNAND booting! */
	/* For second device booting */
	/* OneNAND BOOTONG failed */
	cmp     r2, #0x8
	moveq   r3, #BOOT_SEC_DEV
#endif

	/* Uart BOOTONG failed */
	cmp     r2, #(0x1<<4)
	moveq   r3, #BOOT_SEC_DEV
	
	ldr	r0, =INF_REG_BASE
	// 把r3中的值写到INF_REG3_OFFSET寄存器中了
	str	r3, [r0, #INF_REG3_OFFSET]     
	// 下面是BL1执行，负责初始化DDR(在lowlevel_init函数中初始化了DDR)，
	// 并且从SD卡的49扇区开始复制整个uboot到DDR中指定位置(0x33e00000)去备用(在movi_bl2_copy函数中实现的)，
	// 然后BL1继续执行直到ldr	pc, _start_armboot时BL1跳转到DDR上的BL2中接着执行uboot的第二阶段
	/*
	 * Go setup Memory and board specific bits prior to relocation.
	 */
	// 设置栈，因为调用函数(bl	lowlevel_init)就要使用栈，所以得先设置栈，这是第一次设置栈(在iSRAM中)
	// 栈地址0xd0036000是自己指定的，指定的原则就是这块空间只给栈用，不会被别人占用
	ldr	sp, =0xd0036000 /* end of sram dedicated to u-boot */
	sub	sp, sp, #12	/* set stack */
	mov	fp, #0
	// lowlevel_init是底层初始化(也就是CPU内部初始化)；lowlevel_init函数执行完如果没有出错那么串口就会打印出'OK'字样，这应该是我们uboot中看到的最早的输出信息。
	// bl只能保留一层地址，如果lowlevel_init函数中还调用了函数，这时候就需要提前设置栈，将lowlevel_init的地址保存起来
	bl	lowlevel_init	/* go setup pll,mux,memory 这个函数中主要是BL1执行时负责初始化DDR*/
	/* To hold max8698 output before releasing power on switch,
	 * set PS_HOLD signal to high
	 */
	// 代码移植时有一个古怪谨慎保守的方式，一般都添加代码，而不是去删除无用代码
	ldr	r0, =0xE010E81C  /* PS_HOLD_CONTROL register 开发板供电锁存做了两次，第一次在lowlevel_init函数中，这里是第二次，无意义*/
	ldr	r1, =0x00005301	 /* PS_HOLD output high	*/
	str	r1, [r0]
	// 第一次设置栈是在iSRAM中，这次因为DDR已经初始化了，所以我们是在DDR中设置栈
	// 为什么要再次设置栈? 
	// DDR已经初始化了，已经有大片的内存可以用了，没必要再把栈放在iSRAM中可怜兮兮了；
	// 原来iSRAM中内存大小空间有限，栈放在那里要注意不能使用过多的栈否则栈会溢出，
	// 我们及时将栈迁移到DDR中也是为了尽可能避免栈使用时候的小心翼翼。
	/* get ready to call C functions 第二次设置栈(调用的C语言程序是bl movi_bl2_copy)，这次是把栈设置在DDR中*/
	ldr	sp, _TEXT_PHY_BASE	/* setup temp stack pointer 栈地址是33E00000 ；uboot在DDR中的物理地址*/
	sub	sp, sp, #12
	mov	fp, #0			/* no previous frame, so fp=0 */

	/* when we already run in ram, we don't need to relocate U-Boot.
	 * and actually, memory controller must be configured before U-Boot
	 * is running in ram.
	 */	// 检查uboot是否需要重定位
	// 冷启动时当前情况是uboot的前一部分(16kb或者8kb)开机自动从SD卡加载到SRAM中正在运行，
	// uboot的第二部分(其实第二部分是整个uboot)还躺在SD卡的某个扇区开头的N个扇区中。
	// 此时uboot的第一阶段已经即将结束了(第一阶段该做的事基本做完了)，结束之前要把第二部分
	// 加载到DDR中链接地址处(33e00000)，这个加载过程就叫重定位。
	ldr	r0, =0xff000fff
	bic	r1, pc, r0		/* r0 <- current base addr of code */
	ldr	r2, _TEXT_BASE		/* r1 <- original base addr in ram */
	bic	r2, r2, r0		/* r0 <- current base addr of code */
	cmp     r1, r2                  /* compare r0, r1                  */
	beq     after_copy		/* r0 == r1 then skip flash copy   */
// 312-356行都是在做重定位，主要是判断是通过什么方式启动的，然后将放在SD卡中的整个uboot重定位到DDR中
#if defined(CONFIG_EVT1)
	/* If BL1 was copied from SD/MMC CH2 */
// 0xD0037488这个内存地址在iSRAM中，这个地址中的值是被硬件自动设置的。
// 硬件根据我们实际电路中SD卡在哪个通道中，会将这个地址中的值设置为相应的数字
// 譬如我们从SD0通道启动时，这个值为EB000000；从SD2通道启动时，这个值为EB200000
	ldr	r0, =0xD0037488		// 0xD0037488地址中存了一个值，这个值与0xEB200000对比，如果相等则是SD卡通道2启动
	ldr	r1, [r0]
	ldr	r2, =0xEB200000
	cmp	r1, r2
	beq     mmcsd_boot	// 如果相等，则是通过外部SD通道2启动的
#endif
	// INF_REG3_OFFSET寄存器中的值是在前面中从r3寄存器中得到的
	ldr	r0, =INF_REG_BASE
	ldr	r1, [r0, #INF_REG3_OFFSET]
	cmp	r1, #BOOT_NAND		/* 0x0 => boot device is nand */
	beq	nand_boot
	cmp	r1, #BOOT_ONENAND	/* 0x1 => boot device is onenand */
	beq	onenand_boot
	cmp     r1, #BOOT_MMCSD	// 这个会成立
	beq     mmcsd_boot
	cmp     r1, #BOOT_NOR
	beq     nor_boot
	cmp     r1, #BOOT_SEC_DEV
	beq     mmcsd_boot

nand_boot:
	mov	r0, #0x1000
	bl	copy_from_nand
	b	after_copy

onenand_boot:
	bl	onenand_bl2_copy
	b	after_copy

mmcsd_boot:
#if DELETE
	ldr     sp, _TEXT_PHY_BASE      
	sub     sp, sp, #12
	mov     fp, #0
#endif		// movi_bl2_copy函数执行的是:将SD卡中整个uboot(BL1+BL2)从SD卡copy到DDR中正确位置(DDR中的地址是0x33e00000)去执行，这个地址是在movi_bl2_copy函数中定义的
	bl      movi_bl2_copy		// 真正的重定位函数
	b       after_copy

nor_boot:
	bl      read_hword
	b       after_copy


after_copy:
// 358-383虚拟地址映射代码
// 物理地址: 物理设备设计生成时赋予的地址。裸机中使用的寄存器地址，就是CPU设计时指定的，这就是物理地址
// 物理地址是硬件编码的，是设计生成时确定好的，一旦确定了就不能改了。寄存器的物理地址是无法通过编程修改的，只能通过查询数据手册获得并操作。
// 物理地址坏处是不够灵活，一个解决方案就是使用虚拟地址。
// 虚拟地址意思就是在我们软件操作和硬件被操作之间增加一个层次，叫做虚拟地址映射层。
// 映射层建立一个虚拟地址到物理地址的映射表。
// 虚拟地址到物理地址映射是不可能通过软件来实现的，
// MMU(memory management unit)，内存管理单元。MMU实际上是SOC中一个硬件单元，它的主要功能就是实现虚拟地址到物理地址映射。
// 虚拟地址到物理地址映射是通过硬件来实现的，这个硬件就是MMU(内存管理单元)。
// MMU单片在cp15协处理器中进行控制，也就是要操作MMU进行虚拟地址映射，方法就是对cp15协处理器的寄存器进行编程。
// 访问控制: 在管理上对内存进行分块，然后每块进行独立的虚拟地址映射，然后在每一块的映射关系中同时还实现了访问控制(对该块可读、可写、只读、只写、不可访问等控制)
// MMU将内存分成一块一块的，然后对每块进行独立映射
// cache的工作和虚拟地址映射有关系。
// cache是快速缓存，意思是比CPU慢，但是比DDR快。CPU嫌弃DDR太慢了，于是乎把一些DDR中常用的内存事先读取缓存在cache中，
// 然后CPU每次需要找东西时先在cache中找。如果cache中有直接用cache中，如果cache中没有才会去DDR中找。
#if defined(CONFIG_ENABLE_MMU)
enable_mmu:
	/* enable domain access 使能域访问C3*/
	// r5是arm中的普通寄存器，c3是cp15中的普通寄存器
	// cp15协处理器内部有c0-c15共16个寄存器，这些寄存器每一个都有自己的作用
	// 所谓的操作cp15协处理器其实就是操作cp15的这些寄存器。
	// c3寄存器在mmu中的作用是控制域访问。域访问是和MMU的访问控制有关的。
	ldr	r5, =0x0000ffff				// mcr用来写CP15协处理器的		c3用来操作域访问的
	mcr	p15, 0, r5, c3, c0, 0		@load domain access register

	/* Set the TTB(translation table base) register 转换表基地址C2*/
	// TTB其实就是转换表的基地址。
	// 转换表是建立一套虚拟地址映射的关键。
	// 转换表分为两部分，表索引(查表的那一栏)和表项(查表之后得到的那一栏)。
	// 表索引对应虚拟地址，表项对应物理地址。一对表索引和表项构成一个转换表单元，能够对一个内存块进行虚拟地址转换
	// 映射中基本规定中规定了内存管理和管理是以块为单位的，至于块有多大，要看你的MMU的支持和你自己的选择。
	// 在ARM中支持3种块大小，细表1KB/粗表4KB/段1MB。真正的转换表就是由若干个转换表单元构成的，每个单元负责1个内存块，总体的转换表负责整个内存(0-4G)控制的映射
	// 整个建立虚拟地址映射的主要工作就是建立这张转换表。
	// 转换表是放置在内存中的，放置时要求起始地址在内存中要xxx位对齐。
	// 转换表不需要软件去干涉使用，而是将基地址TTB设置到CPU的c2寄存器中，MMU工作时会自动去查转换表。
	// 下面几行代码的作用是得到转换表基地址，然后将基地址写到c2寄存器中
	// 为什么要经过r0/r1/r2? 主要原因就是转换表被重定位的时候已经重定位到DDR中了
	// ldr r0可能不是在DDR中，所以要对它进行高位的运算，把_mmu_table_base基地址的低位取出来和
	// CFG_PHY_UBOOT_BASE地址进行位或，找到uboot镜像转换表的地方，然后放到c2寄存器中
	ldr	r0, _mmu_table_base		// _mmu_table_base转换表基地址
	ldr	r1, =CFG_PHY_UBOOT_BASE	// 物理地址
	ldr	r2, =0xfff00000
	bic	r0, r0, r2
	orr	r1, r0, r1
	mcr	p15, 0, r1, c2, c0, 0

	/* Enable the MMU 使能MMU C1*/
mmu_on:
	// cp15的c1寄存器的bit0控制MMU开关。只要将这一个bit置1即可开启MMU。
	// 开启MMU之后上层软件层的地址就必须经过TT的转换才能发给下层物理层去执行。
	mrc	p15, 0, r0, c1, c0, 0
	orr	r0, r0, #1				// 将C1置位为1，即可开启MMU
	mcr	p15, 0, r0, c1, c0, 0
	nop
	nop
	nop
	nop
#endif
// MMU开启后，下面执行的代码都是使用虚拟地址了。
skip_hw_init:
	/* Set up the stack						    */
stack_setup:
#if defined(CONFIG_MEMORY_UPPER_CODE)
	// 第三次设置栈(调用的C语言程序是ldr  pc, _start_armboot)，这次设置栈还是在DDR中，
	// 本次设置的目的是将栈设置在合适(安全、紧凑而不浪费内存)的地方
	// 我们实际将栈设置在uboot起始地址上方2MB处，这样安全的栈空间是: 2MB - uboot大小 - 0x1000(4kb) = 1.8MB左右。
	// 这个空间即没有太浪费内存，又足够安全。
	ldr	sp, =(CFG_UBOOT_BASE + CFG_UBOOT_SIZE - 0x1000)
#else
	ldr	r0, _TEXT_BASE		/* upper 128 KiB: relocated uboot   */
	sub	r0, r0, #CFG_MALLOC_LEN	/* malloc area                      */
	sub	r0, r0, #CFG_GBL_DATA_SIZE /* bdinfo                        */
#if defined(CONFIG_USE_IRQ)
	sub	r0, r0, #(CONFIG_STACKSIZE_IRQ+CONFIG_STACKSIZE_FIQ)
#endif
	sub	sp, r0, #12		/* leave 3 words for abort-stack    */

#endif
// 清bss
clear_bss:
	// _bss_start和_bss_end地址是从链接脚本得到的
	ldr	r0, _bss_start			/* find start of bss segment        */
	ldr	r1, _bss_end			/* stop here                        */
	mov 	r2, #0x00000000		/* clear                            */

clbss_l:
	str	r2, [r0]		/* clear loop...                    */
	add	r0, r0, #4
	cmp	r0, r1
	ble	clbss_l
	// 远跳转到DDR中的uboot的BL2执行，在这之前的代码都是在iRAM中执行。
	// 这里这个远跳转就是uboot第一阶段和第二阶段的分界线
	ldr	pc, _start_armboot	// 实际上使用一个远跳转直接跳转到DDR中的第二阶段的开始地址处。
							// 远跳转的含义就是这句话加载的地址和当前运行地址无关，而和链接地址有关。因此这个远跳转可以以实现从iSRAM中的第一阶段跳转到DDR中的第二阶段。
_start_armboot:
// start_armboot是uboot/lib_arm/board.c中，这是一个C语言实现的函数。这个函数就是uboot的第二阶段
	.word start_armboot

#if defined(CONFIG_ENABLE_MMU)
_mmu_table_base:
	.word mmu_table
#endif

/*
 * copy U-Boot to SDRAM and jump to ram (from NAND or OneNAND)
 * r0: size to be compared
 * Load 1'st 2blocks to RAM because U-boot's size is larger than 1block(128k) size
 */
	.globl copy_from_nand
copy_from_nand:
	push	{lr}		/* save return address */

	mov	r9, r0
	
	mov	r9, #0x100		/* Compare about 8KB */
	bl	copy_uboot_to_ram
	tst 	r0, #0x0
	bne	copy_failed

#if defined(CONFIG_EVT1)
	ldr	r0, =0xd0020000
#else	
	ldr	r0, =0xd0030000
#endif
	ldr	r1, _TEXT_PHY_BASE	/* 0x23e00000 */

#if !defined(CONFIG_SECURE_BOOT)
1:	ldr	r3, [r0], #4
	ldr	r4, [r1], #4
	teq	r3, r4
	bne	compare_failed	/* not matched */
	subs	r9, r9, #4
	bne	1b
#endif
	pop	{pc}		/* all is OK */

copy_failed:
	nop			/* copy from nand failed */
	b	copy_failed

compare_failed:
	nop			/* compare failed */
	b	compare_failed

/*
 * we assume that cache operation is done before. (eg. cleanup_before_linux())
 * actually, we don't need to do anything about cache if not use d-cache in U-Boot
 * So, in this function we clean only MMU. by scsuh
 *
 * void	theLastJump(void *kernel, int arch_num, uint boot_params);
 */
#if defined(CONFIG_ENABLE_MMU)
	.globl theLastJump
theLastJump:
	mov	r9, r0
	ldr	r3, =0xfff00000
	ldr	r4, _TEXT_PHY_BASE
	adr	r5, phy_last_jump
	bic	r5, r5, r3
	orr	r5, r5, r4
	mov	pc, r5
phy_last_jump:
	/*
	 * disable MMU stuff
	 */
	mrc	p15, 0, r0, c1, c0, 0
	bic	r0, r0, #0x00002300	/* clear bits 13, 9:8 (--V- --RS) */
	bic	r0, r0, #0x00000087	/* clear bits 7, 2:0 (B--- -CAM) */
	orr	r0, r0, #0x00000002	/* set bit 2 (A) Align */
	orr	r0, r0, #0x00001000	/* set bit 12 (I) I-Cache */
	mcr	p15, 0, r0, c1, c0, 0

	mcr	p15, 0, r0, c8, c7, 0	/* flush v4 TLB */

	mov	r0, #0
	mov	pc, r9
#endif
/*
 *************************************************************************
 *
 * Interrupt handling
 *
 *************************************************************************
 */
@
@ IRQ stack frame.
@
#define S_FRAME_SIZE	72

#define S_OLD_R0	68
#define S_PSR		64
#define S_PC		60
#define S_LR		56
#define S_SP		52

#define S_IP		48
#define S_FP		44
#define S_R10		40
#define S_R9		36
#define S_R8		32
#define S_R7		28
#define S_R6		24
#define S_R5		20
#define S_R4		16
#define S_R3		12
#define S_R2		8
#define S_R1		4
#define S_R0		0

#define MODE_SVC 0x13
#define I_BIT	 0x80

/*
 * use bad_save_user_regs for abort/prefetch/undef/swi ...
 * use irq_save_user_regs / irq_restore_user_regs for IRQ/FIQ handling
 */

	.macro	bad_save_user_regs
	sub	sp, sp, #S_FRAME_SIZE		@ carve out a frame on current user stack
	stmia	sp, {r0 - r12}			@ Save user registers (now in svc mode) r0-r12
	// stmia	sp, {r0 - r12}解释: 将r0存入sp指向的内存处(假设为0x30001000)；然后地址+4(即指向0x30001004)，将r1存入该地址；然后地址再+4(0x30001008)，将r2存入该地址...直到r12内容放入(0x30001030)，指令完成
	ldr	r2, _armboot_start
	sub	r2, r2, #(CFG_MALLOC_LEN)
	sub	r2, r2, #(CFG_GBL_DATA_SIZE+8)	@ set base 2 words into abort stack
	ldmia	r2, {r2 - r3}			@ get values for "aborted" pc and cpsr (into parm regs)
	add	r0, sp, #S_FRAME_SIZE		@ grab pointer to old stack

	add	r5, sp, #S_SP
	mov	r1, lr
	stmia	r5, {r0 - r3}			@ save sp_SVC, lr_SVC, pc, cpsr
	mov	r0, sp				@ save current stack into r0 (param register)
	.endm

	.macro	irq_save_user_regs
	sub	sp, sp, #S_FRAME_SIZE
	stmia	sp, {r0 - r12}			@ Calling r0-r12
	add	r8, sp, #S_PC			@ !!!! R8 NEEDS to be saved !!!! a reserved stack spot would be good.
	stmdb	r8, {sp, lr}^			@ Calling SP, LR
	str	lr, [r8, #0]			@ Save calling PC
	mrs	r6, spsr
	str	r6, [r8, #4]			@ Save CPSR
	str	r0, [r8, #8]			@ Save OLD_R0
	mov	r0, sp
	.endm

	.macro	irq_restore_user_regs
	ldmia	sp, {r0 - lr}^			@ Calling r0 - lr
	mov	r0, r0
	ldr	lr, [sp, #S_PC]			@ Get PC
	add	sp, sp, #S_FRAME_SIZE
	subs	pc, lr, #4			@ return & move spsr_svc into cpsr
	.endm

	.macro get_bad_stack
	ldr	r13, _armboot_start		@ setup our mode stack (enter in banked mode)
	sub	r13, r13, #(CFG_MALLOC_LEN)	@ move past malloc pool
	sub	r13, r13, #(CFG_GBL_DATA_SIZE+8) @ move to reserved a couple spots for abort stack

	str	lr, [r13]			@ save caller lr in position 0 of saved stack
	mrs	lr, spsr			@ get the spsr
	str	lr, [r13, #4]			@ save spsr in position 1 of saved stack

	mov	r13, #MODE_SVC			@ prepare SVC-Mode
	@ msr	spsr_c, r13
	msr	spsr, r13			@ switch modes, make sure moves will execute
	mov	lr, pc				@ capture return pc
	movs	pc, lr				@ jump to next instruction & switch modes.
	.endm

	.macro get_bad_stack_swi
	sub	r13, r13, #4			@ space on current stack for scratch reg.
	str	r0, [r13]			@ save R0's value.
	ldr	r0, _armboot_start		@ get data regions start
	sub	r0, r0, #(CFG_MALLOC_LEN)	@ move past malloc pool
	sub	r0, r0, #(CFG_GBL_DATA_SIZE+8)	@ move past gbl and a couple spots for abort stack
	str	lr, [r0]			@ save caller lr in position 0 of saved stack
	mrs	r0, spsr			@ get the spsr
	str	lr, [r0, #4]			@ save spsr in position 1 of saved stack
	ldr	r0, [r13]			@ restore r0
	add	r13, r13, #4			@ pop stack entry
	.endm

	.macro get_irq_stack			@ setup IRQ stack
	ldr	sp, IRQ_STACK_START
	.endm

	.macro get_fiq_stack			@ setup FIQ stack
	ldr	sp, FIQ_STACK_START
	.endm

/*
 * exception handlers
 */
	.align	5
undefined_instruction:
	get_bad_stack
	bad_save_user_regs
	bl	do_undefined_instruction

	.align	5
software_interrupt:
	get_bad_stack_swi
	bad_save_user_regs
	bl	do_software_interrupt

	.align	5
prefetch_abort:
	get_bad_stack
	bad_save_user_regs
	bl	do_prefetch_abort

	.align	5
data_abort:
	get_bad_stack
	bad_save_user_regs
	bl	do_data_abort

	.align	5
not_used:
	get_bad_stack
	bad_save_user_regs
	bl	do_not_used

#if defined(CONFIG_USE_IRQ)

	.align	5
irq:
	get_irq_stack
	irq_save_user_regs
	bl	do_irq
	irq_restore_user_regs

	.align	5
fiq:
	get_fiq_stack
	/* someone ought to write a more effiction fiq_save_user_regs */
	irq_save_user_regs
	bl	do_fiq
	irq_restore_user_regs

#else

	.align	5
irq:
	get_bad_stack
	bad_save_user_regs
	bl	do_irq

	.align	5
fiq:
	get_bad_stack
	bad_save_user_regs
	bl	do_fiq

#endif
	.align 5
.global arm_cache_flush
arm_cache_flush:
       mcr     p15, 0, r1, c7, c5, 0           @ invalidate I cache
       mov     pc, lr                          @ back to caller

/*
 *     v7_flush_dcache_all()
 *
 *     Flush the whole D-cache.
 *
 *     Corrupted registers: r0-r5, r7, r9-r11
 *
 *     - mm    - mm_struct describing address space
 */
       .align 5
.global v7_flush_dcache_all
v7_flush_dcache_all:

	ldr	r0, =0xffffffff
	mrc	p15, 1, r0, c0, c0, 1 		@ Read CLIDR
	ands	r3, r0, #0x7000000
	mov	r3, r3, LSR #23       		@ Cache level value (naturally aligned)
	beq 	Finished
	mov	r10, #0
Loop1:         
	add	r2, r10, r10, LSR #1  		@ Work out 3xcachelevel
	mov	r1, r0, LSR r2        		@ bottom 3 bits are the Ctype for this level
	and	r1, r1, #7            		@ get those 3 bits alone
	cmp	r1, #2
	blt	Skip                   		@ no cache or only instruction cache at this level
	mcr	p15, 2, r10, c0, c0, 0 		@ write the Cache Size selection register
	mov	r1, #0
	mcr	p15, 0, r1, c7, c5, 4 		@ PrefetchFlush to sync the change to the CacheSizeID reg
	mrc	p15, 1, r1, c0, c0, 0 		@ reads current Cache Size ID register
	and	r2, r1, #0x7           		@ extract the line length field
	add	r2, r2, #4            		@ add 4 for the line length offset (log2 16 bytes)
	ldr	r4, =0x3FF
	ands	r4, r4, r1, LSR #3   		@ R4 is the max number on the way size (right aligned)
	clz	r5, r4                		@ R5 is the bit position of the way size increment
	ldr	r7, =0x00007FFF
	ands	r7, r7, r1, LSR #13  		@ R7 is the max number of the index size (right aligned)
Loop2:         
	mov	r9, r4                      	@ R9 working copy of the max way size (right aligned)
Loop3:         
	orr	r11, r10, r9, LSL r5        	@ factor in the way number and cache number into R11
	orr	r11, r11, r7, LSL r2        	@ factor in the index number
	mcr	p15, 0, r11, c7, c6, 2 		@ invalidate by set/way
	subs	r9, r9, #1                 	@ decrement the way number
	bge	Loop3
	subs	r7, r7, #1                 	@ decrement the index
	bge	Loop2
Skip:          
	add	r10, r10, #2                	@ increment the cache number
	cmp	r3, r10
	bgt	Loop1
Finished:
	mov	pc, lr
	
       .align  5
.global disable_l2cache
disable_l2cache:
	mrc     p15, 0, r0, c1, c0, 1
	bic     r0, r0, #(1<<1)
	mcr     p15, 0, r0, c1, c0, 1
	mov	pc, lr


       .align  5
.global enable_l2cache
enable_l2cache:
	mrc     p15, 0, r0, c1, c0, 1
	orr     r0, r0, #(1<<1)
	mcr     p15, 0, r0, c1, c0, 1
	mov     pc, lr

       .align  5
.global set_l2cache_auxctrl
set_l2cache_auxctrl:
	mov	r0, #0x0
	mcr     p15, 1, r0, c9, c0, 2
	mov     pc, lr

       .align  5
.global set_l2cache_auxctrl_cycle
set_l2cache_auxctrl_cycle:
	mrc 	p15, 1, r0, c9, c0, 2
	bic 	r0, r0, #(0x1<<29)
	bic 	r0, r0, #(0x1<<21)
	bic 	r0, r0, #(0x7<<6)
	bic 	r0, r0, #(0x7<<0)
	mcr 	p15, 1, r0, c9, c0, 2
	mov     pc,lr

	.align 5
CoInvalidateDCacheIndex:
	;/* r0 = index */
	mcr     p15, 0, r0, c7, c6, 2
	mov     pc,lr


#if defined(CONFIG_INTEGRATOR) && defined(CONFIG_ARCH_CINTEGRATOR)
/* Use the IntegratorCP function from board/integratorcp/platform.S */
#elif defined(CONFIG_S5PC11X)
/* For future usage of S3C64XX*/
#else
	.align	5
.globl reset_cpu
reset_cpu:
	ldr	r1, rstctl	/* get addr for global reset reg */
	mov	r3, #0x2	/* full reset pll+mpu */
	str	r3, [r1]	/* force reset */
	mov	r0, r0
_loop_forever:
	b	_loop_forever
rstctl:
	.word	PM_RSTCTRL_WKUP

#endif

